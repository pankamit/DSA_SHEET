## https://takeuforward.org/plus/dsa/graph/hard-problems-ii/number-of-islands-ii

class Solution {
    static class Disjoint{
        int[] rank;
        int[] size;
        int[] par;

        Disjoint(int n){
            rank = new int[n];
            size = new int[n];
            par = new int[n];

            Arrays.fill(size,1);
            
            for(int ind=0;ind<n;ind++){
                par[ind] = ind;
            }
        }

        int findUPar(int u){
            if(par[u] == u){
                return u;
            }
            int res = findUPar(par[u]);
            par[u] = res;
            return res;
        }

        void unionByRank(int u, int v){
            int pu = findUPar(u);
            int pv = findUPar(v);

            if(pu == pv){
                return;
            }

            if(rank[pu] < rank[pv]){
                par[pu] = pv;  
            }else if(rank[pv] < rank[pu]){
                par[pv] = pu;
            }else{
                par[pv] = pu;
                rank[pu]++;
            }

        }

        void unionBySize(int u, int v){
            int pu = findUPar(u);
            int pv = findUPar(v);

            if(pu == pv){
                return;
            }

            if(size[pu] < size[pv]){
                par[pu] = pv;
                size[pv] += size[pu];  
            }else if(rank[pv] < rank[pu]){
                par[pv] = pu;
                size[pu] += size[pv];
            }else{
                par[pv] = pu;
                size[pu] += size[pv];
            }

        }

        boolean isConnected(int u,int v){
            return findUPar(u) == findUPar(v);
        }
    }
    
    public List<Integer> numOfIslands(int n, int m, int[][] A) {

        int[][] mat = new int[n][m];
        Disjoint dj = new Disjoint(n*m);
        int len = A.length;
        int cnt = 0;

        List<Integer> lst = new ArrayList<>();
        for(int i=0;i<len;i++){
           int r = A[i][0];
           int c = A[i][1];

           if(mat[r][c] == 1){
            lst.add(cnt);
            continue;
           }

           mat[r][c] = 1;
           cnt++;
           int u = r*m+c;

           int[][] dir = {{0,1},{0,-1},{1,0},{-1,0}};



           for(int ind=0;ind<dir.length;ind++){
              int new_r = r+dir[ind][0];
              int  new_c = c+dir[ind][1];

                if(new_r >=0 && new_r< n && new_c>=0 && new_c <m && mat[new_r][new_c] == 1){
                    int v = new_r*m+new_c;
                    if(!dj.isConnected(u,v)){
                        //dj.unionByRank(u,v);
                        dj.unionBySize(u,v);
                        cnt--;
                    }
                }
            
           }

           lst.add(cnt);
        }

        return lst;

    }
}


