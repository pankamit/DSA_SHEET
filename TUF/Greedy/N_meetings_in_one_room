## https://takeuforward.org/plus/dsa/greedy-algorithms/scheduling-and-interval-problems/n-meetings-in-one-room

class Solution {

  static class Pair{
        int start;
        int end;

        Pair(int start, int end){
          this.start = start;
          this.end = end;
        }

}

static class MyComparator implements Comparator<Pair>{
     
     public int compare(Pair p1, Pair p2){
        return p1.end - p2.end;
     }
}

    public int maxMeetings(int[] sarr, int[] earr) {
       //your code goes here
       int n = sarr.length;
       List<Pair> pLst = new ArrayList<>();

       for(int ind=0;ind<n;ind++){
          pLst.add(new Pair(sarr[ind],earr[ind]));
       }

       Collections.sort(pLst,new MyComparator());

       int cnt = 1;
       int prevEnd = pLst.get(0).end;
       for(int ind=1;ind<n;ind++){
        if(prevEnd < pLst.get(ind).start){
          cnt++;
          prevEnd = pLst.get(ind).end;
        }
       }

       return cnt;

    }
}




