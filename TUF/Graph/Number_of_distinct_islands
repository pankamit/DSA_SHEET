## https://takeuforward.org/plus/dsa/graph/traversal-problems/number-of-distinct-islands?tab=editorial

class Solution {
    public int countDistinctIslands(int[][] mat) {
        int n = mat.length;
        int m = mat[0].length;

        boolean[][] visitArr = new boolean[n][m];

        HashSet<List<String>> hs = new HashSet<>();
        //List<String> lst = new ArrayList<>();

        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(mat[i][j] == 1 && !visitArr[i][j]){
                    visitArr[i][j]=true;
                    List<String> lst = new ArrayList<>();
                    lst.add(0+"-"+0);
                    traverse(mat,n,m,i,j,i,j,visitArr,lst);
                    hs.add(lst);
                }
            }
        }

        return hs.size();



    }

    void traverse(int[][] mat,int n,int m,int r,int c, int baser,int basec,boolean[][] visitArr,List<String> lst){



        int[][] dir = {{0,1},{0,-1},{1,0},{-1,0}};

        for(int ind=0;ind<dir.length;ind++){
            int new_r = r+dir[ind][0];
            int new_c = c+dir[ind][1];
            if(new_r >=0 && new_r < n && new_c>=0 && new_c<m && mat[new_r][new_c] == 1 && !visitArr[new_r][new_c]){
                visitArr[new_r][new_c]=true;
                lst.add((new_r-baser)+"-"+(new_c-basec));
                traverse(mat,n,m,new_r,new_c,baser,basec,visitArr,lst);
                //lst.remove(lst.size()-1);
            }
        }

    }
}
