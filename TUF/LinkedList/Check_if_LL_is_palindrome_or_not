## https://takeuforward.org/plus/dsa/linked-list/faqs--medium/check-if-ll-is-palindrome-or-not

/*Definition of singly linked list:
class ListNode {
    int val;
    ListNode next;

    ListNode() {
        val = 0;
        next = null;
    }

    ListNode(int data1) {
        val = data1;
        next = null;
    }

    ListNode(int data1, ListNode next1) {
        val = data1;
        next = next1;
    }
}
 */

class Solution {
    public boolean isPalindrome(ListNode head) {
        ListNode fNode = head;
        ListNode sNode = head;
        ListNode prev = null;

        if(head == null || head.next == null){
            return true;
        }

        while(fNode != null && fNode.next != null){
            ListNode curr = sNode;
            //ListNode prev = null;
            fNode = fNode.next.next;
            
           // if(curr != null){
                ListNode next = curr.next;
                curr.next = prev;
                prev = curr;
                curr = next;
            //}

            sNode = curr;

            
        }

        if(isPass(prev,sNode) || isPass(prev,sNode.next)){
            return true;
        }

        return false;

    }

    boolean isPass(ListNode node1, ListNode node2){
        while(node1 != null && node2 != null){
            if(node1.val != node2.val){
                return false;
            }
            node1 = node1.next;
            node2 = node2.next;
        
        }
        return node1 == null && node2 == null;
    }
    
}
