## https://leetcode.com/contest/weekly-contest-460/problems/maximum-number-of-subsequences-after-one-inserting/

class Solution {
    public long numOfSubsequences(String s) {
        int n = s.length();

        long[] lArr = new long[n+1];
        long[] rArr = new long[n];

        //System.out.println("n "+n);
        
        for(int ind=1;ind<=n;ind++){
            char ch = s.charAt(ind-1);
            if(ch == 'L'){
                lArr[ind] = lArr[ind-1]+1;
            }else{
                lArr[ind] = lArr[ind-1];
            }
        }
        //lArr[n] = lArr[n-1];

        for(int ind=n-2;ind>=0;ind--){
            char ch = s.charAt(ind+1);
            if(ch == 'T'){
                rArr[ind] = rArr[ind+1]+1;
            }else{
                rArr[ind] = rArr[ind+1];
            }
        }

        long cnt = 0;
        long lcnt = 0;
        long tcnt = 0;
        long cmax = 0;
        long ccnt = 0;
        
        for(int ind=0;ind<n;ind++){
            char ch = s.charAt(ind);
            if(ch == 'C'){
               cnt += lArr[ind]*rArr[ind];
               lcnt += (lArr[ind]+1)*rArr[ind];
               tcnt += lArr[ind]*(rArr[ind]+1);
                if(ind > 0){
                   cmax = Math.max(cmax,lArr[ind+1]*rArr[ind]);
                }
            }
        }
        ccnt = cnt+cmax;

        System.out.println(" cnt "+cnt+" lcnt "+lcnt+" tcnt "+tcnt+" ccnt "+ccnt);    
        long max = cnt;
        max = Math.max(max,lcnt);
        max = Math.max(max,tcnt);
        max = Math.max(max,ccnt);
        

        
        System.out.println("After L and T "+max);    
        
        /*int max = tr("L"+s,n+1,0,0);
        System.out.println("After L "+max);
        int res2 = tr(s+"T",n+1,0,0);
        System.out.println("After T "+res2);
        max = Math.max(max,res2);*/
        
        long maxVal = 0;
        //int maxi = -1;
        lArr = new long[n];
        long tc = 0;

        if(s.charAt(0) == 'L'){
            lArr[0] = 1;
            
        }    
        for(int ind=1;ind<n;ind++){
            if(s.charAt(ind) == 'L'){
                lArr[ind] = lArr[ind-1]+1;
            }else{
                lArr[ind] = lArr[ind-1];
            }
            
        }

        for(int ind=n-1;ind>=0;ind--){
            long res = lArr[ind]*tc;
            if(maxVal < res){
                maxVal = res;
          //      maxi =  ind;
            }
            if(s.charAt(ind) == 'T'){
                tc++;    
            }
            
        }

        /*if(maxi == -1){
            return max;
        }*/

        long res3 = cnt + maxVal;
        System.out.println("after C " +res3+" cnt "+cnt);
        
        
       // s = s.substring(0,maxi+1)+"C"+s.substring(maxi+1,n);
       // System.out.println("S "+s);
        //int res3 = tr(s,n+1,0,0);
       // System.out.println("after C " +res3);
       // max =Math.max(max,res3);
            
            
        

        return max;
    }

    int tr(String s,int n,int pos,int c){
       // System.out.println("s "+s+" pos "+pos+" c "+c);
        if(pos == n){
            if(c == 3){
                return 1;
            }else{
                return 0;
            }
        }
        
        if(c == 3){
            return 1;    
        }

        
        char ch = s.charAt(pos);
        char ch2 = 'A';
        if(c == 0){
            ch2 = 'L';
        }else if(c == 1){
            ch2 = 'C';
        }else if(c == 2){
            ch2 = 'T';
        }

        int cnt = 0;
        if(ch == ch2){
           cnt+= tr(s,n,pos+1,c+1);
        }
        cnt += tr(s,n,pos+1,c);

        return cnt;
    }
    
}
