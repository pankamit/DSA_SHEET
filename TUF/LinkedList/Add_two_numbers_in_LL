## https://takeuforward.org/plus/dsa/linked-list/logic-building/add-two-numbers-in-ll

/*Definition for singly Linked List
class ListNode {
    int val;
    ListNode next;

    ListNode() {
        val = 0;
        next = null;
    }

    ListNode(int data1) {
        val = data1;
        next = null;
    }

    ListNode(int data1, ListNode next1) {
        val = data1;
        next = next1;
    }
}
*/
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {

      
      //  l1 = reverse(l1);
       // l2 = reverse(l2);

       /* ListNode l = l1;
        traverse(l);
        l = l2;
        traverse(l);*/
        int carry = 0;

        ListNode head = new ListNode(-1);
        ListNode node = head;

        while(l1 != null && l2 != null){
            int sum = l1.val+l2.val+carry;
            int rem = sum%10;
            int dev = sum/10;

            node.next = new ListNode(rem);
            node = node.next;

            carry = dev;

            l1 = l1.next;
            l2 = l2.next;    
        }

        while(l1 != null){
            int sum = l1.val+carry;
            int rem = sum%10;
            int dev = sum/10;

            node.next = new ListNode(rem);
            node = node.next;

            carry = dev;    

            l1 = l1.next;
        }


        while(l2 != null){
            int sum = l2.val+carry;
            int rem = sum%10;
            int dev = sum/10;

            node.next = new ListNode(rem);
            node = node.next;

            carry = dev;    

            l2 = l2.next;
        }

        if(carry > 0){
            node.next = new ListNode(carry);
        }

      //  head = reverse(head);

        
        return head.next;
    }

    void traverse(ListNode node){
        while(node != null){
            System.out.print(node.val+" ");
            node = node.next;
        }
        System.out.println();

    }

    ListNode reverse(ListNode node){
     
        ListNode prev = null;
        while(node != null){
            ListNode next = node.next;
            node.next = prev;
            prev = node;
            node = next;
        }
        return prev;

        


    }
}
