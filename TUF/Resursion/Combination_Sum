## https://takeuforward.org/plus/dsa/recursion/faqs-medium/combination-sum

class Solution {
    public List<List<Integer>> combinationSum(int[] arr, int k) {
        //your code goes here
        int n = arr.length;
        List<List<Integer>> resLst = new ArrayList<>();

        List<Integer> lst = new ArrayList<>();

        tr(arr,n,0,k,lst,resLst);
        return resLst;

    }

    void tr(int[] arr,int n,int pos,int k,List<Integer> lst,List<List<Integer>> resLst){

        if(k == 0){
            resLst.add(new ArrayList(lst));
            return;
        }

        if(k < 0){
            return;
        }

        if(pos == n){
            return;
        }

        // pick
        lst.add(arr[pos]);
        tr(arr,n,pos,k-arr[pos],lst,resLst);
        lst.remove(lst.size()-1);

        // not pick
        tr(arr,n,pos+1,k,lst,resLst);


    }
}
